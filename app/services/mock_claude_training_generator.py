"""
Mock Claude training generator for testing and development.
Returns realistic training plan data without making API calls.
"""
import json
from datetime import date, timedelta
from typing import List, Dict, Any
from sqlalchemy.orm import Session

from app.models.goal import Goal, GoalType
from app.models.training import (
    TrainingPlan, 
    Workout, 
    WorkoutType, 
    WorkoutIntensity, 
    TrainingPhase
)
from app.models.user import User


class MockClaudeTrainingGenerator:
    """Mock AI-powered training plan generator that returns realistic data."""
    
    def create_training_plan(self, db: Session, goal: Goal, user: User) -> TrainingPlan:
        """Create a mock AI-generated training plan."""
        
        # Calculate plan duration based on event date
        if goal.event_date:
            days_available = (goal.event_date - date.today()).days
            total_weeks = max(8, days_available // 7)
        else:
            total_weeks = 16
        
        # Generate realistic mock plan data
        plan_data = self._get_mock_plan_data(goal, user, total_weeks)
        
        # Create the training plan record
        # Update goal with phase information
        goal.base_weeks = plan_data.get("base_weeks", max(4, total_weeks // 3))
        goal.build_weeks = plan_data.get("build_weeks", max(4, total_weeks // 3))
        goal.peak_weeks = plan_data.get("peak_weeks", max(2, total_weeks // 6))
        goal.taper_weeks = plan_data.get("taper_weeks", 2)
        
        training_plan = TrainingPlan(
            goal_id=goal.id,
            name=plan_data.get("name", f"{goal.title} - AI Training Plan"),
            description=plan_data.get("description", "Personalized training plan generated by AI"),
            total_weeks=total_weeks,
            base_weeks=goal.base_weeks,
            build_weeks=goal.build_weeks,
            peak_weeks=goal.peak_weeks,
            taper_weeks=goal.taper_weeks,
            weekly_swim_sessions=plan_data.get("weekly_swim_sessions", 0),
            weekly_bike_sessions=plan_data.get("weekly_bike_sessions", 0),
            weekly_run_sessions=plan_data.get("weekly_run_sessions", 0),
            weekly_strength_sessions=plan_data.get("weekly_strength_sessions", 2),
            training_philosophy=plan_data.get("training_philosophy", "Progressive, safe training approach")
        )
        
        db.add(training_plan)
        db.commit()
        db.refresh(training_plan)
        
        # Generate mock workouts for the plan
        self._generate_mock_workouts(db, training_plan, goal, user, plan_data)
        
        return training_plan
    
    def _get_mock_plan_data(self, goal: Goal, user: User, total_weeks: int) -> Dict[str, Any]:
        """Generate realistic mock plan data based on goal type."""
        
        # Calculate age from birth date if available
        age = None
        if hasattr(goal, 'birth_date') and goal.birth_date:
            age = date.today().year - goal.birth_date.year
        
        # Base plan structure based on goal type
        if goal.goal_type == GoalType.TRIATHLON:
            return {
                "name": f"Beginner Sprint Triathlon Training Plan - {total_weeks} Weeks",
                "description": "Progressive triathlon training plan focusing on building endurance across swim, bike, and run disciplines with emphasis on injury prevention and gradual volume increases.",
                "base_weeks": max(6, total_weeks // 2),
                "build_weeks": max(4, total_weeks // 3),
                "peak_weeks": max(2, total_weeks // 8),
                "taper_weeks": 2,
                "weekly_swim_sessions": 2,
                "weekly_bike_sessions": 2,
                "weekly_run_sessions": 3,
                "weekly_strength_sessions": 2,
                "training_philosophy": f"Given your beginner experience level and current fitness (able to run 1.5 miles), this plan prioritizes safe progression and injury prevention. The {total_weeks}-week structure allows for proper base building before introducing higher intensities. Age-appropriate recovery is built in{f' (age {age})' if age else ''}. Each discipline starts with technique focus before volume increases."
            }
        elif goal.goal_type == GoalType.MARATHON:
            return {
                "name": f"Beginner Marathon Training Plan - {total_weeks} Weeks",
                "description": "Progressive marathon training plan focusing on building aerobic base and running endurance with careful mileage progression.",
                "base_weeks": max(8, total_weeks * 2 // 3),
                "build_weeks": max(6, total_weeks // 4),
                "peak_weeks": 2,
                "taper_weeks": 3,
                "weekly_swim_sessions": 0,
                "weekly_bike_sessions": 1,  # Cross training
                "weekly_run_sessions": 4,
                "weekly_strength_sessions": 2,
                "training_philosophy": "Marathon training requires patience and consistency. Given your current ability to run 1.5 miles, this plan follows the 10% rule for weekly mileage increases and includes mandatory rest days for recovery."
            }
        elif goal.goal_type == GoalType.WEIGHT_LOSS:
            return {
                "name": f"Weight Loss Fitness Plan - {total_weeks} Weeks",
                "description": "Comprehensive fitness plan combining cardio and strength training for sustainable weight loss.",
                "base_weeks": max(4, total_weeks // 3),
                "build_weeks": max(6, total_weeks // 2),
                "peak_weeks": max(4, total_weeks // 4),
                "taper_weeks": 1,
                "weekly_swim_sessions": 1,
                "weekly_bike_sessions": 1,
                "weekly_run_sessions": 2,
                "weekly_strength_sessions": 3,
                "training_philosophy": "Weight loss requires consistent caloric expenditure combined with muscle preservation. This plan balances cardiovascular exercise with strength training to maintain metabolism."
            }
        else:
            # General fitness fallback
            return {
                "name": f"General Fitness Plan - {total_weeks} Weeks",
                "description": "Well-rounded fitness plan to improve overall health and athletic performance.",
                "base_weeks": max(4, total_weeks // 3),
                "build_weeks": max(4, total_weeks // 3),
                "peak_weeks": max(2, total_weeks // 6),
                "taper_weeks": 1,
                "weekly_swim_sessions": 1,
                "weekly_bike_sessions": 1,
                "weekly_run_sessions": 2,
                "weekly_strength_sessions": 2,
                "training_philosophy": "Balanced approach to fitness focusing on cardiovascular health, strength, and flexibility."
            }
    
    def _generate_mock_workouts(self, db: Session, plan: TrainingPlan, goal: Goal, user: User, plan_data: Dict[str, Any]):
        """Generate realistic mock workouts for each week."""
        
        for week_num in range(1, plan.total_weeks + 1):
            # Determine training phase
            if week_num <= plan.base_weeks:
                phase = TrainingPhase.BASE
                intensity_focus = "Easy to Moderate"
            elif week_num <= plan.base_weeks + plan.build_weeks:
                phase = TrainingPhase.BUILD
                intensity_focus = "Moderate to Hard"
            elif week_num <= plan.base_weeks + plan.build_weeks + plan.peak_weeks:
                phase = TrainingPhase.PEAK
                intensity_focus = "Hard to Very Hard"
            else:
                phase = TrainingPhase.TAPER
                intensity_focus = "Easy to Moderate"
            
            # Generate weekly focus based on phase and week
            weekly_focus = self._get_weekly_focus(goal.goal_type, week_num, phase, plan.total_weeks)
            
            # Generate mock workouts based on plan structure
            workouts = self._get_mock_weekly_workouts(goal.goal_type, week_num, phase, plan_data)
            
            for workout_data in workouts:
                workout = Workout(
                    training_plan_id=plan.id,
                    week_number=week_num,
                    day_of_week=workout_data["day_of_week"],
                    name=workout_data["name"],
                    description=workout_data.get("description", ""),
                    instructions=workout_data.get("instructions", ""),
                    workout_type=WorkoutType[workout_data["workout_type"]],
                    phase=phase.value,
                    intensity=workout_data.get("intensity", "Easy"),
                    duration_minutes=workout_data.get("duration_minutes", 45),
                    distance_miles=workout_data.get("distance_miles"),
                    total_yards=workout_data.get("total_yards"),
                    target_heart_rate_zone=workout_data.get("target_heart_rate_zone", "Zone 2"),
                    notes=workout_data.get("notes", ""),
                    weekly_focus=weekly_focus
                )
                db.add(workout)
        
        db.commit()
    
    def _get_mock_weekly_workouts(self, goal_type: GoalType, week_num: int, phase: TrainingPhase, plan_data: Dict[str, Any]) -> List[Dict]:
        """Generate mock workouts for a specific week."""
        
        workouts = []
        
        if goal_type == GoalType.TRIATHLON:
            # Swimming workouts
            for i in range(plan_data["weekly_swim_sessions"]):
                day = 1 + i * 3  # Spread sessions across the week
                workouts.append({
                    "day_of_week": day % 7,
                    "name": f"Swim Technique & Endurance - Week {week_num}",
                    "description": "Focus on stroke technique and gradual distance building",
                    "instructions": "Warm-up: 100y easy swim, 4x25y kick\\nMain Set: 4x50y freestyle with 15s rest\\nCool-down: 100y easy swim",
                    "workout_type": "SWIM",
                    "intensity": "Easy" if phase == TrainingPhase.BASE else "Moderate",
                    "duration_minutes": 45,
                    "total_yards": 400 + (week_num * 50),  # Progressive distance
                    "target_heart_rate_zone": "Zone 2",
                    "notes": "Focus on breathing technique and consistent pace"
                })
            
            # Cycling workouts
            for i in range(plan_data["weekly_bike_sessions"]):
                day = 2 + i * 3
                workouts.append({
                    "day_of_week": day % 7,
                    "name": f"Bike Endurance - Week {week_num}",
                    "description": "Steady-state cycling for aerobic base building",
                    "instructions": "Warm-up: 5min easy spin\\nMain: 30min steady effort\\nCool-down: 5min easy spin",
                    "workout_type": "BIKE",
                    "intensity": "Moderate",
                    "duration_minutes": 45,
                    "distance_miles": 8 + (week_num * 0.5),  # Progressive distance
                    "target_heart_rate_zone": "Zone 2-3",
                    "notes": "Maintain comfortable conversation pace"
                })
            
            # Running workouts
            for i in range(plan_data["weekly_run_sessions"]):
                day = i * 2
                if i == 0:
                    # Easy run
                    workouts.append({
                        "day_of_week": day % 7,
                        "name": f"Easy Run - Week {week_num}",
                        "description": "Recovery-paced run for aerobic base",
                        "instructions": "Warm-up: 5min walk\\nMain: 15-25min easy run\\nCool-down: 5min walk",
                        "workout_type": "RUN",
                        "intensity": "Easy",
                        "duration_minutes": 30,
                        "distance_miles": 1.5 + (week_num * 0.1),
                        "target_heart_rate_zone": "Zone 1-2",
                        "notes": "Should feel comfortable throughout"
                    })
                elif i == 1:
                    # Brick workout (bike + run)
                    workouts.append({
                        "day_of_week": day % 7,
                        "name": f"Brick Workout - Week {week_num}",
                        "description": "Bike-to-run transition practice",
                        "instructions": "Bike 20min moderate, quick transition, run 10min easy",
                        "workout_type": "BRICK",
                        "intensity": "Moderate",
                        "duration_minutes": 35,
                        "distance_miles": 1.0,
                        "target_heart_rate_zone": "Zone 2-3",
                        "notes": "Practice quick transitions"
                    })
                else:
                    # Tempo run
                    workouts.append({
                        "day_of_week": day % 7,
                        "name": f"Tempo Run - Week {week_num}",
                        "description": "Comfortably hard effort run",
                        "instructions": "Warm-up: 5min easy\\nMain: 10-15min tempo\\nCool-down: 5min easy",
                        "workout_type": "RUN",
                        "intensity": "Hard",
                        "duration_minutes": 25,
                        "distance_miles": 1.8 + (week_num * 0.1),
                        "target_heart_rate_zone": "Zone 3-4",
                        "notes": "Sustainable hard effort"
                    })
            
            # Strength training
            for i in range(plan_data["weekly_strength_sessions"]):
                day = 1 + i * 4
                workouts.append({
                    "day_of_week": day % 7,
                    "name": f"Functional Strength - Week {week_num}",
                    "description": "Sport-specific strength training",
                    "instructions": "Circuit: Push-ups, Squats, Planks, Lunges\\n3 sets x 8-12 reps each",
                    "workout_type": "STRENGTH",
                    "intensity": "Moderate",
                    "duration_minutes": 30,
                    "target_heart_rate_zone": "Zone 2-3",
                    "notes": "Focus on form over speed"
                })
        
        return workouts
    
    def _get_weekly_focus(self, goal_type: GoalType, week_num: int, phase: TrainingPhase, total_weeks: int) -> str:
        """Generate weekly focus content based on goal type and training phase."""
        
        phase_focuses = {
            TrainingPhase.BASE: {
                GoalType.TRIATHLON: [
                    "Focus on building your base and exercise logistics",
                    "Establish consistent training routine and recovery habits", 
                    "Build aerobic fitness across all three disciplines",
                    "Learn proper swim technique and breathing patterns",
                    "Develop bike handling skills and saddle comfort"
                ],
                GoalType.MARATHON: [
                    "Focus on building aerobic base and running consistency",
                    "Establish proper running form and cadence",
                    "Build weekly mileage gradually and safely",
                    "Develop mental toughness for longer runs"
                ],
                GoalType.WEIGHT_LOSS: [
                    "Focus on building exercise habits and movement patterns",
                    "Establish sustainable calorie-burning activities",
                    "Learn proper form for strength training exercises",
                    "Create consistent workout schedule"
                ]
            },
            TrainingPhase.BUILD: {
                GoalType.TRIATHLON: [
                    "Increase intensity and build specific fitness",
                    "Practice race-pace efforts in each discipline",
                    "Build transition skills between sports",
                    "Increase training volume while maintaining technique",
                    "Practice nutrition strategies during longer sessions"
                ],
                GoalType.MARATHON: [
                    "Increase weekly mileage and long run distance",
                    "Add tempo runs and threshold training",
                    "Practice race pace and fueling strategies",
                    "Build leg strength and running economy"
                ],
                GoalType.WEIGHT_LOSS: [
                    "Increase workout intensity and challenge",
                    "Add variety to prevent workout plateaus",
                    "Focus on strength building for metabolism",
                    "Combine cardio and resistance training"
                ]
            },
            TrainingPhase.PEAK: [
                "High-intensity training and race preparation",
                "Practice race-day scenarios and pacing",
                "Fine-tune technique under race conditions", 
                "Build confidence through challenging workouts",
                "Test equipment and nutrition strategies"
            ],
            TrainingPhase.TAPER: [
                "Reduce volume, maintain intensity, and recover",
                "Focus on race preparation and mental readiness",
                "Maintain fitness while allowing body to recover",
                "Practice race-day routine and logistics",
                "Build confidence and excitement for event"
            ]
        }
        
        # Get phase-specific focuses
        if phase in [TrainingPhase.PEAK, TrainingPhase.TAPER]:
            focuses = phase_focuses[phase]
        else:
            focuses = phase_focuses[phase].get(goal_type, phase_focuses[phase][GoalType.TRIATHLON])
        
        # Select focus based on week number within phase
        focus_index = (week_num - 1) % len(focuses)
        return focuses[focus_index]


def create_mock_claude_training_plan(db: Session, goal: Goal, user: User) -> TrainingPlan:
    """Mock version of create_claude_training_plan for testing."""
    generator = MockClaudeTrainingGenerator()
    return generator.create_training_plan(db, goal, user)